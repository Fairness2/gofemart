// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/balanse.go

// Package mock is a generated GoMock package.
package mock

import (
	models "gofemart/internal/models"
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
)

// MockBalanceRepository is a mock of BalanceRepository interface.
type MockBalanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceRepositoryMockRecorder
}

// MockBalanceRepositoryMockRecorder is the mock recorder for MockBalanceRepository.
type MockBalanceRepositoryMockRecorder struct {
	mock *MockBalanceRepository
}

// NewMockBalanceRepository creates a new mock instance.
func NewMockBalanceRepository(ctrl *gomock.Controller) *MockBalanceRepository {
	mock := &MockBalanceRepository{ctrl: ctrl}
	mock.recorder = &MockBalanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceRepository) EXPECT() *MockBalanceRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockBalanceRepository) CreateAccount(account *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockBalanceRepositoryMockRecorder) CreateAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockBalanceRepository)(nil).CreateAccount), account)
}

// GetSum mocks base method.
func (m *MockBalanceRepository) GetSum(userID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSum", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSum indicates an expected call of GetSum.
func (mr *MockBalanceRepositoryMockRecorder) GetSum(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSum", reflect.TypeOf((*MockBalanceRepository)(nil).GetSum), userID)
}

// MockMutexService is a mock of MutexService interface.
type MockMutexService struct {
	ctrl     *gomock.Controller
	recorder *MockMutexServiceMockRecorder
}

// MockMutexServiceMockRecorder is the mock recorder for MockMutexService.
type MockMutexServiceMockRecorder struct {
	mock *MockMutexService
}

// NewMockMutexService creates a new mock instance.
func NewMockMutexService(ctrl *gomock.Controller) *MockMutexService {
	mock := &MockMutexService{ctrl: ctrl}
	mock.recorder = &MockMutexServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutexService) EXPECT() *MockMutexServiceMockRecorder {
	return m.recorder
}

// DeleteMutex mocks base method.
func (m *MockMutexService) DeleteMutex(userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMutex", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMutex indicates an expected call of DeleteMutex.
func (mr *MockMutexServiceMockRecorder) DeleteMutex(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMutex", reflect.TypeOf((*MockMutexService)(nil).DeleteMutex), userID)
}

// GetMutex mocks base method.
func (m *MockMutexService) GetMutex(userID int64) (*sync.Mutex, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMutex", userID)
	ret0, _ := ret[0].(*sync.Mutex)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMutex indicates an expected call of GetMutex.
func (mr *MockMutexServiceMockRecorder) GetMutex(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMutex", reflect.TypeOf((*MockMutexService)(nil).GetMutex), userID)
}

// SetMutex mocks base method.
func (m *MockMutexService) SetMutex(userID int64) *sync.Mutex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMutex", userID)
	ret0, _ := ret[0].(*sync.Mutex)
	return ret0
}

// SetMutex indicates an expected call of SetMutex.
func (mr *MockMutexServiceMockRecorder) SetMutex(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMutex", reflect.TypeOf((*MockMutexService)(nil).SetMutex), userID)
}
